{
  "version": 3,
  "sources": ["../../@mdui/shared/helpers/observeResize.js", "../../lit-html/src/directives/when.ts", "../../@mdui/shared/decorators/watch.js"],
  "sourcesContent": ["import { $ } from '@mdui/jq/$.js';\nimport '@mdui/jq/methods/each.js';\nimport { uniqueId } from './uniqueId.js';\nlet weakMap;\n// ResizeObserver 实例，所有 resizeObserver 函数内部共用一个 ResizeObserver 实例\nlet observer;\n/**\n * 监听元素的尺寸变化\n * @param target 监听该元素的尺寸变化\n * @param callback 尺寸变化时执行的回调函数，`this` 指向监听的元素\n */\nexport const observeResize = (target, callback) => {\n    const $target = $(target);\n    const key = uniqueId();\n    // 取消监听函数\n    const result = {\n        unobserve: () => {\n            $target.each((_, target) => {\n                const options = weakMap.get(target);\n                const index = options.coArr.findIndex((co) => co.key === key);\n                if (index !== -1) {\n                    options.coArr.splice(index, 1);\n                }\n                if (!options.coArr.length) {\n                    observer.unobserve(target);\n                    weakMap.delete(target);\n                }\n                else {\n                    weakMap.set(target, options);\n                }\n            });\n        },\n    };\n    // 初始化\n    if (!weakMap) {\n        weakMap = new WeakMap();\n        observer = new ResizeObserver((entries) => {\n            entries.forEach((entry) => {\n                const target = entry.target;\n                const options = weakMap.get(target);\n                options.entry = entry;\n                options.coArr.forEach((co) => {\n                    co.callback.call(result, entry, result);\n                });\n            });\n        });\n    }\n    // 添加监听\n    $target.each((_, target) => {\n        const options = weakMap.get(target) ?? { coArr: [] };\n        // 同一个元素已添加过监听后，再次添加新的监听时，不会立即执行回调函数，所以这里手动调用一次回调函数\n        if (options.coArr.length && options.entry) {\n            callback.call(result, options.entry, result);\n        }\n        options.coArr.push({ callback, key });\n        weakMap.set(target, options);\n        observer.observe(target);\n    });\n    return result;\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\ntype Falsy = null | undefined | false | 0 | -0 | 0n | '';\n\n/**\n * When `condition` is true, returns the result of calling `trueCase()`, else\n * returns the result of calling `falseCase()` if `falseCase` is defined.\n *\n * This is a convenience wrapper around a ternary expression that makes it a\n * little nicer to write an inline conditional without an else.\n *\n * @example\n *\n * ```ts\n * render() {\n *   return html`\n *     ${when(this.user, () => html`User: ${this.user.username}`, () => html`Sign In...`)}\n *   `;\n * }\n * ```\n */\nexport function when<C extends Falsy, T, F = undefined>(\n  condition: C,\n  trueCase: (c: C) => T,\n  falseCase?: (c: C) => F\n): F;\nexport function when<C, T, F>(\n  condition: C extends Falsy ? never : C,\n  trueCase: (c: C) => T,\n  falseCase?: (c: C) => F\n): T;\nexport function when<C, T, F = undefined>(\n  condition: C,\n  trueCase: (c: Exclude<C, Falsy>) => T,\n  falseCase?: (c: Extract<C, Falsy>) => F\n): C extends Falsy ? F : T;\nexport function when(\n  condition: unknown,\n  trueCase: (c: unknown) => unknown,\n  falseCase?: (c: unknown) => unknown\n): unknown {\n  return condition ? trueCase(condition) : falseCase?.(condition);\n}\n", "/**\n * watch 装饰器。在 @property 或 @state 属性变更时，且在组件更新前触发\n * 若初始值为 undefined，则初始状态不会触发；否则初始状态就会先触发一次\n *\n * 如果要等属性变更后，且组件更新完成再执行，可以在函数中执行 `await this.updateComplete`\n * 如果要等组件首次渲染完后再监听属性，可以传入第二个参数 true。或者在函数中通过 `this.hasUpdated` 进行判断\n *\n * @watch('propName')\n * handlePropChange(oldValue, newValue) {\n *\n * }\n */\n/**\n * @param propName 监听的属性名\n * @param waitUntilFirstUpdate 是否等首次渲染完后再监听\n */\nexport function watch(propName, waitUntilFirstUpdate = false) {\n    return (proto, functionName) => {\n        // @ts-ignore\n        const { update } = proto;\n        if (propName in proto) {\n            // @ts-ignore\n            proto.update = function (changedProperties) {\n                if (changedProperties.has(propName)) {\n                    const oldValue = changedProperties.get(propName);\n                    const newValue = this[propName];\n                    if (oldValue !== newValue) {\n                        if (!waitUntilFirstUpdate || this.hasUpdated) {\n                            // @ts-ignore\n                            this[functionName](oldValue, newValue);\n                        }\n                    }\n                }\n                update.call(this, changedProperties);\n            };\n        }\n    };\n}\n"],
  "mappings": ";;;;;;;;AAGA,IAAI;AAEJ,IAAI;AAMG,IAAM,gBAAgB,CAAC,QAAQ,aAAa;AAC/C,QAAM,UAAU,EAAE,MAAM;AACxB,QAAM,MAAM,SAAS;AAErB,QAAM,SAAS;AAAA,IACX,WAAW,MAAM;AACb,cAAQ,KAAK,CAAC,GAAGA,YAAW;AACxB,cAAM,UAAU,QAAQ,IAAIA,OAAM;AAClC,cAAM,QAAQ,QAAQ,MAAM,UAAU,CAAC,OAAO,GAAG,QAAQ,GAAG;AAC5D,YAAI,UAAU,IAAI;AACd,kBAAQ,MAAM,OAAO,OAAO,CAAC;AAAA,QACjC;AACA,YAAI,CAAC,QAAQ,MAAM,QAAQ;AACvB,mBAAS,UAAUA,OAAM;AACzB,kBAAQ,OAAOA,OAAM;AAAA,QACzB,OACK;AACD,kBAAQ,IAAIA,SAAQ,OAAO;AAAA,QAC/B;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAEA,MAAI,CAAC,SAAS;AACV,cAAU,oBAAI,QAAQ;AACtB,eAAW,IAAI,eAAe,CAAC,YAAY;AACvC,cAAQ,QAAQ,CAAC,UAAU;AACvB,cAAMA,UAAS,MAAM;AACrB,cAAM,UAAU,QAAQ,IAAIA,OAAM;AAClC,gBAAQ,QAAQ;AAChB,gBAAQ,MAAM,QAAQ,CAAC,OAAO;AAC1B,aAAG,SAAS,KAAK,QAAQ,OAAO,MAAM;AAAA,QAC1C,CAAC;AAAA,MACL,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAEA,UAAQ,KAAK,CAAC,GAAGA,YAAW;AACxB,UAAM,UAAU,QAAQ,IAAIA,OAAM,KAAK,EAAE,OAAO,CAAC,EAAE;AAEnD,QAAI,QAAQ,MAAM,UAAU,QAAQ,OAAO;AACvC,eAAS,KAAK,QAAQ,QAAQ,OAAO,MAAM;AAAA,IAC/C;AACA,YAAQ,MAAM,KAAK,EAAE,UAAU,IAAI,CAAC;AACpC,YAAQ,IAAIA,SAAQ,OAAO;AAC3B,aAAS,QAAQA,OAAM;AAAA,EAC3B,CAAC;AACD,SAAO;AACX;;;ACnBM,SAAU,KACd,WACA,UACA,WAAmC;AAEnC,SAAO,YAAY,SAAS,SAAS,IAAI,YAAY,SAAS;AAChE;;;AC9BO,SAAS,MAAM,UAAU,uBAAuB,OAAO;AAC1D,SAAO,CAAC,OAAO,iBAAiB;AAE5B,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,YAAY,OAAO;AAEnB,YAAM,SAAS,SAAU,mBAAmB;AACxC,YAAI,kBAAkB,IAAI,QAAQ,GAAG;AACjC,gBAAM,WAAW,kBAAkB,IAAI,QAAQ;AAC/C,gBAAM,WAAW,KAAK,QAAQ;AAC9B,cAAI,aAAa,UAAU;AACvB,gBAAI,CAAC,wBAAwB,KAAK,YAAY;AAE1C,mBAAK,YAAY,EAAE,UAAU,QAAQ;AAAA,YACzC;AAAA,UACJ;AAAA,QACJ;AACA,eAAO,KAAK,MAAM,iBAAiB;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": ["target"]
}
