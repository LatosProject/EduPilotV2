import {
  uniqueId
} from "./chunk-3373L762.js";
import {
  $
} from "./chunk-TEJKIG4D.js";

// node_modules/@mdui/shared/helpers/observeResize.js
var weakMap;
var observer;
var observeResize = (target, callback) => {
  const $target = $(target);
  const key = uniqueId();
  const result = {
    unobserve: () => {
      $target.each((_, target2) => {
        const options = weakMap.get(target2);
        const index = options.coArr.findIndex((co) => co.key === key);
        if (index !== -1) {
          options.coArr.splice(index, 1);
        }
        if (!options.coArr.length) {
          observer.unobserve(target2);
          weakMap.delete(target2);
        } else {
          weakMap.set(target2, options);
        }
      });
    }
  };
  if (!weakMap) {
    weakMap = /* @__PURE__ */ new WeakMap();
    observer = new ResizeObserver((entries) => {
      entries.forEach((entry) => {
        const target2 = entry.target;
        const options = weakMap.get(target2);
        options.entry = entry;
        options.coArr.forEach((co) => {
          co.callback.call(result, entry, result);
        });
      });
    });
  }
  $target.each((_, target2) => {
    const options = weakMap.get(target2) ?? { coArr: [] };
    if (options.coArr.length && options.entry) {
      callback.call(result, options.entry, result);
    }
    options.coArr.push({ callback, key });
    weakMap.set(target2, options);
    observer.observe(target2);
  });
  return result;
};

// node_modules/lit-html/development/directives/when.js
function when(condition, trueCase, falseCase) {
  return condition ? trueCase(condition) : falseCase?.(condition);
}

// node_modules/@mdui/shared/decorators/watch.js
function watch(propName, waitUntilFirstUpdate = false) {
  return (proto, functionName) => {
    const { update } = proto;
    if (propName in proto) {
      proto.update = function(changedProperties) {
        if (changedProperties.has(propName)) {
          const oldValue = changedProperties.get(propName);
          const newValue = this[propName];
          if (oldValue !== newValue) {
            if (!waitUntilFirstUpdate || this.hasUpdated) {
              this[functionName](oldValue, newValue);
            }
          }
        }
        update.call(this, changedProperties);
      };
    }
  };
}

export {
  when,
  watch,
  observeResize
};
/*! Bundled license information:

lit-html/development/directives/when.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=chunk-7QV74WTN.js.map
