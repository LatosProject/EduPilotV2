import {
  AnchorMixin,
  FocusableMixin,
  RippleMixin,
  cc,
  classMap,
  createRef,
  ifDefined,
  nothingTemplate,
  ref
} from "./chunk-VLYWBSIC.js";
import {
  $,
  DefinedController,
  MduiElement,
  booleanConverter,
  componentStyle,
  isFunction,
  isString,
  isUndefined,
  property
} from "./chunk-TEJKIG4D.js";
import {
  __decorate,
  css,
  customElement,
  html
} from "./chunk-TAWH3UXR.js";

// node_modules/@mdui/jq/shared/form.js
var formCollections = /* @__PURE__ */ new WeakMap();
var getFormControls = (form) => {
  const nativeFormControls = [...form.elements];
  const formControls = formCollections.get(form) || [];
  const comparePosition = (a, b) => {
    const position = a.compareDocumentPosition(b);
    return position & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;
  };
  return [...nativeFormControls, ...formControls].sort(comparePosition);
};

// node_modules/@mdui/shared/controllers/form.js
var reportValidityOverloads = /* @__PURE__ */ new WeakMap();
var formResets = /* @__PURE__ */ new WeakMap();
var FormController = class {
  constructor(host, options) {
    (this.host = host).addController(this);
    this.definedController = new DefinedController(host, {
      needDomReady: true
    });
    this.options = {
      form: (control) => {
        const formId = $(control).attr("form");
        if (formId) {
          const root = control.getRootNode();
          return root.getElementById(formId);
        }
        return control.closest("form");
      },
      name: (control) => control.name,
      value: (control) => control.value,
      defaultValue: (control) => control.defaultValue,
      setValue: (control, value) => control.value = value,
      disabled: (control) => control.disabled,
      reportValidity: (control) => isFunction(control.reportValidity) ? control.reportValidity() : true,
      ...options
    };
    this.onFormData = this.onFormData.bind(this);
    this.onFormSubmit = this.onFormSubmit.bind(this);
    this.onFormReset = this.onFormReset.bind(this);
    this.reportFormValidity = this.reportFormValidity.bind(this);
  }
  hostConnected() {
    this.definedController.whenDefined().then(() => {
      this.form = this.options.form(this.host);
      if (this.form) {
        this.attachForm(this.form);
      }
    });
  }
  hostDisconnected() {
    this.detachForm();
  }
  hostUpdated() {
    this.definedController.whenDefined().then(() => {
      const form = this.options.form(this.host);
      if (!form) {
        this.detachForm();
      }
      if (form && this.form !== form) {
        this.detachForm();
        this.attachForm(form);
      }
    });
  }
  /**
   * 获取当前表单控件关联的 `<form>` 元素
   */
  getForm() {
    return this.form ?? null;
  }
  /**
   * 重置整个表单，所有表单控件恢复成默认值
   */
  reset(invoker) {
    this.doAction("reset", invoker);
  }
  /**
   * 提交整个表单
   */
  submit(invoker) {
    this.doAction("submit", invoker);
  }
  attachForm(form) {
    if (!form) {
      this.form = void 0;
      return;
    }
    this.form = form;
    if (formCollections.has(this.form)) {
      formCollections.get(this.form).add(this.host);
    } else {
      formCollections.set(this.form, /* @__PURE__ */ new Set([this.host]));
    }
    this.form.addEventListener("formdata", this.onFormData);
    this.form.addEventListener("submit", this.onFormSubmit);
    this.form.addEventListener("reset", this.onFormReset);
    if (!reportValidityOverloads.has(this.form)) {
      reportValidityOverloads.set(this.form, this.form.reportValidity);
      this.form.reportValidity = () => this.reportFormValidity();
    }
  }
  detachForm() {
    if (this.form) {
      formCollections.get(this.form).delete(this.host);
      this.form.removeEventListener("formdata", this.onFormData);
      this.form.removeEventListener("submit", this.onFormSubmit);
      this.form.removeEventListener("reset", this.onFormReset);
      if (reportValidityOverloads.has(this.form) && !formCollections.get(this.form).size) {
        this.form.reportValidity = reportValidityOverloads.get(this.form);
        reportValidityOverloads.delete(this.form);
      }
    }
  }
  doAction(type, invoker) {
    if (!this.form) {
      return;
    }
    const $button = $(`<button type="${type}">`).css({
      position: "absolute",
      width: 0,
      height: 0,
      clipPath: "inset(50%)",
      overflow: "hidden",
      whiteSpace: "nowrap"
    });
    const button = $button[0];
    if (invoker) {
      button.name = invoker.name;
      button.value = invoker.value;
      [
        "formaction",
        "formenctype",
        "formmethod",
        "formnovalidate",
        "formtarget"
      ].forEach((attr) => {
        $button.attr(attr, $(invoker).attr(attr));
      });
    }
    this.form.append(button);
    button.click();
    button.remove();
  }
  onFormData(event) {
    const disabled = this.options.disabled(this.host);
    const name = this.options.name(this.host);
    const value = this.options.value(this.host);
    const isButton = [
      "mdui-button",
      "mdui-button-icon",
      "mdui-chip",
      "mdui-fab",
      "mdui-segmented-button"
    ].includes(this.host.tagName.toLowerCase());
    if (!disabled && !isButton && isString(name) && name && !isUndefined(value)) {
      if (Array.isArray(value)) {
        value.forEach((val) => {
          event.formData.append(name, val.toString());
        });
      } else {
        event.formData.append(name, value.toString());
      }
    }
  }
  // todo: 当前组件进行验证的顺序，取决于组件的注册顺序，而不会按在 DOM 中的顺序从上到下验证。如何按 DOM 顺序验证？
  onFormSubmit(event) {
    const disabled = this.options.disabled(this.host);
    const reportValidity = this.options.reportValidity;
    if (this.form && !this.form.noValidate && !disabled && !reportValidity(this.host)) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }
  }
  onFormReset() {
    if (this.form) {
      this.options.setValue(this.host, this.options.defaultValue(this.host));
      this.host.invalid = false;
      if (formResets.has(this.form)) {
        formResets.get(this.form).add(this.host);
      } else {
        formResets.set(this.form, /* @__PURE__ */ new Set([this.host]));
      }
    }
  }
  reportFormValidity() {
    if (this.form && !this.form.noValidate) {
      const elements = getFormControls(this.form);
      for (const element of elements) {
        if (isFunction(element.reportValidity) && !element.reportValidity()) {
          return false;
        }
      }
    }
    return true;
  }
};

// node_modules/mdui/components/circular-progress/style.js
var style = css`:host{position:relative;display:inline-block;flex-shrink:0;width:2.5rem;height:2.5rem;stroke:rgb(var(--mdui-color-primary))}.progress{position:relative;display:inline-block;width:100%;height:100%;text-align:left;transition:opacity var(--mdui-motion-duration-medium1) var(--mdui-motion-easing-linear)}.determinate svg{transform:rotate(-90deg);fill:transparent}.determinate .track{stroke:transparent}.determinate .circle{stroke:inherit;transition:stroke-dashoffset var(--mdui-motion-duration-long2) var(--mdui-motion-easing-standard)}.indeterminate{font-size:0;letter-spacing:0;white-space:nowrap;animation:mdui-comp-circular-progress-rotate 1568ms var(--mdui-motion-easing-linear) infinite}.indeterminate .circle,.indeterminate .layer{position:absolute;width:100%;height:100%}.indeterminate .layer{animation:mdui-comp-circular-progress-layer-rotate 5332ms var(--mdui-motion-easing-standard) infinite both}.indeterminate .circle{fill:transparent;stroke:inherit}.indeterminate .gap-patch{position:absolute;top:0;left:47.5%;width:5%;height:100%;overflow:hidden}.indeterminate .gap-patch .circle{left:-900%;width:2000%;transform:rotate(180deg)}.indeterminate .clipper{position:relative;display:inline-block;width:50%;height:100%;overflow:hidden}.indeterminate .clipper .circle{width:200%}.indeterminate .clipper.left .circle{animation:mdui-comp-circular-progress-left-spin 1333ms var(--mdui-motion-easing-standard) infinite both}.indeterminate .clipper.right .circle{left:-100%;animation:mdui-comp-circular-progress-right-spin 1333ms var(--mdui-motion-easing-standard) infinite both}@keyframes mdui-comp-circular-progress-rotate{to{transform:rotate(360deg)}}@keyframes mdui-comp-circular-progress-layer-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}}@keyframes mdui-comp-circular-progress-left-spin{0%{transform:rotate(265deg)}50%{transform:rotate(130deg)}100%{transform:rotate(265deg)}}@keyframes mdui-comp-circular-progress-right-spin{0%{transform:rotate(-265deg)}50%{transform:rotate(-130deg)}100%{transform:rotate(-265deg)}}`;

// node_modules/mdui/components/circular-progress/index.js
var CircularProgress = class CircularProgress2 extends MduiElement {
  constructor() {
    super(...arguments);
    this.max = 1;
  }
  render() {
    const isDeterminate = !isUndefined(this.value);
    return html`<div class="progress ${classMap({
      determinate: isDeterminate,
      indeterminate: !isDeterminate
    })}">${isDeterminate ? this.renderDeterminate() : this.renderInDeterminate()}</div>`;
  }
  renderDeterminate() {
    const value = this.value;
    const strokeWidth = 4;
    const circleRadius = 18;
    const π = 3.1415926;
    const center = circleRadius + strokeWidth / 2;
    const circumference = 2 * π * circleRadius;
    const determinateStrokeDashOffset = (1 - value / Math.max(this.max ?? value, value)) * circumference;
    return html`<svg viewBox="0 0 ${center * 2} ${center * 2}"><circle class="track" cx="${center}" cy="${center}" r="${circleRadius}" stroke-width="${strokeWidth}"></circle><circle class="circle" cx="${center}" cy="${center}" r="${circleRadius}" stroke-dasharray="${2 * π * circleRadius}" stroke-dashoffset="${determinateStrokeDashOffset}" stroke-width="${strokeWidth}"></circle></svg>`;
  }
  renderInDeterminate() {
    const strokeWidth = 4;
    const circleRadius = 18;
    const π = 3.1415926;
    const center = circleRadius + strokeWidth / 2;
    const circumference = 2 * π * circleRadius;
    const halfCircumference = 0.5 * circumference;
    const circle = (thisStrokeWidth) => html`<svg class="circle" viewBox="0 0 ${center * 2} ${center * 2}"><circle cx="${center}" cy="${center}" r="${circleRadius}" stroke-dasharray="${circumference}" stroke-dashoffset="${halfCircumference}" stroke-width="${thisStrokeWidth}"></circle></svg>`;
    return html`<div class="layer"><div class="clipper left">${circle(strokeWidth)}</div><div class="gap-patch">${circle(strokeWidth * 0.8)}</div><div class="clipper right">${circle(strokeWidth)}</div></div>`;
  }
};
CircularProgress.styles = [componentStyle, style];
__decorate([
  property({ type: Number, reflect: true })
], CircularProgress.prototype, "max", void 0);
__decorate([
  property({ type: Number })
], CircularProgress.prototype, "value", void 0);
CircularProgress = __decorate([
  customElement("mdui-circular-progress")
], CircularProgress);

// node_modules/mdui/components/button/button-base-style.js
var buttonBaseStyle = css`.button{position:relative;display:inline-flex;align-items:center;justify-content:center;height:100%;padding:0;overflow:hidden;color:inherit;font-size:inherit;font-family:inherit;font-weight:inherit;letter-spacing:inherit;white-space:nowrap;text-align:center;text-decoration:none;vertical-align:middle;background:0 0;border:none;outline:0;cursor:inherit;-webkit-user-select:none;user-select:none;touch-action:manipulation;zoom:1;-webkit-user-drag:none}`;

// node_modules/mdui/components/button/button-base.js
var ButtonBase = class extends AnchorMixin(RippleMixin(FocusableMixin(MduiElement))) {
  constructor() {
    super(...arguments);
    this.disabled = false;
    this.loading = false;
    this.name = "";
    this.value = "";
    this.type = "button";
    this.formNoValidate = false;
    this.formController = new FormController(this);
  }
  /**
   * 表单验证状态对象，具体参见 [`ValidityState`](https://developer.mozilla.org/zh-CN/docs/Web/API/ValidityState)
   */
  get validity() {
    if (this.isButton()) {
      return this.focusElement.validity;
    }
  }
  /**
   * 如果表单验证未通过，此属性将包含提示信息。如果验证通过，此属性将为空字符串
   */
  get validationMessage() {
    if (this.isButton()) {
      return this.focusElement.validationMessage;
    }
  }
  get rippleDisabled() {
    return this.disabled || this.loading;
  }
  get focusElement() {
    return this.isButton() ? this.renderRoot?.querySelector("._button") : !this.focusDisabled ? this.renderRoot?.querySelector("._a") : this;
  }
  get focusDisabled() {
    return this.disabled || this.loading;
  }
  /**
   * 检查表单字段是否通过验证。如果未通过，返回 `false` 并触发 `invalid` 事件；如果通过，返回 `true`
   */
  checkValidity() {
    if (this.isButton()) {
      const valid = this.focusElement.checkValidity();
      if (!valid) {
        this.emit("invalid", {
          bubbles: false,
          cancelable: true,
          composed: false
        });
      }
      return valid;
    }
    return true;
  }
  /**
   * 检查表单字段是否通过验证。如果未通过，返回 `false` 并触发 `invalid` 事件；如果通过，返回 `true`。
   *
   * 如果验证未通过，还会在组件上显示验证失败的提示。
   */
  reportValidity() {
    if (this.isButton()) {
      const invalid = !this.focusElement.reportValidity();
      if (invalid) {
        this.emit("invalid", {
          bubbles: false,
          cancelable: true,
          composed: false
        });
      }
      return !invalid;
    }
    return true;
  }
  /**
   * 设置自定义的错误提示文本。只要这个文本不为空，就表示字段未通过验证
   *
   * @param message 自定义的错误提示文本
   */
  setCustomValidity(message) {
    if (this.isButton()) {
      this.focusElement.setCustomValidity(message);
    }
  }
  firstUpdated(_changedProperties) {
    super.firstUpdated(_changedProperties);
    this.addEventListener("click", () => {
      if (this.type === "submit") {
        this.formController.submit(this);
      }
      if (this.type === "reset") {
        this.formController.reset(this);
      }
    });
  }
  renderLoading() {
    return this.loading ? html`<mdui-circular-progress part="loading"></mdui-circular-progress>` : nothingTemplate;
  }
  renderButton({ id, className, part, content = html`<slot></slot>` }) {
    return html`<button id="${ifDefined(id)}" class="${cc(["_button", className])}" part="${ifDefined(part)}" ?disabled="${this.rippleDisabled || this.focusDisabled}">${content}</button>`;
  }
  isButton() {
    return !this.href;
  }
};
ButtonBase.styles = [
  componentStyle,
  buttonBaseStyle
];
__decorate([
  property({
    type: Boolean,
    reflect: true,
    converter: booleanConverter
  })
], ButtonBase.prototype, "disabled", void 0);
__decorate([
  property({
    type: Boolean,
    reflect: true,
    converter: booleanConverter
  })
], ButtonBase.prototype, "loading", void 0);
__decorate([
  property({ reflect: true })
], ButtonBase.prototype, "name", void 0);
__decorate([
  property({ reflect: true })
], ButtonBase.prototype, "value", void 0);
__decorate([
  property({ reflect: true })
], ButtonBase.prototype, "type", void 0);
__decorate([
  property({ reflect: true })
], ButtonBase.prototype, "form", void 0);
__decorate([
  property({ reflect: true, attribute: "formaction" })
], ButtonBase.prototype, "formAction", void 0);
__decorate([
  property({ reflect: true, attribute: "formenctype" })
], ButtonBase.prototype, "formEnctype", void 0);
__decorate([
  property({ reflect: true, attribute: "formmethod" })
], ButtonBase.prototype, "formMethod", void 0);
__decorate([
  property({
    type: Boolean,
    reflect: true,
    converter: booleanConverter,
    attribute: "formnovalidate"
  })
], ButtonBase.prototype, "formNoValidate", void 0);
__decorate([
  property({ reflect: true, attribute: "formtarget" })
], ButtonBase.prototype, "formTarget", void 0);

// node_modules/mdui/components/button/style.js
var style2 = css`:host{--shape-corner:var(--mdui-shape-corner-full);position:relative;display:inline-block;flex-shrink:0;overflow:hidden;text-align:center;border-radius:var(--shape-corner);cursor:pointer;-webkit-tap-highlight-color:transparent;transition:box-shadow var(--mdui-motion-duration-short4) var(--mdui-motion-easing-linear);min-width:3rem;height:2.5rem;color:rgb(var(--mdui-color-primary));font-size:var(--mdui-typescale-label-large-size);font-weight:var(--mdui-typescale-label-large-weight);letter-spacing:var(--mdui-typescale-label-large-tracking);line-height:var(--mdui-typescale-label-large-line-height)}.button{width:100%;padding:0 1rem}:host([full-width]:not([full-width=false i])){display:block}:host([variant=elevated]){box-shadow:var(--mdui-elevation-level1);background-color:rgb(var(--mdui-color-surface-container-low));--mdui-comp-ripple-state-layer-color:var(--mdui-color-primary)}:host([variant=filled]){color:rgb(var(--mdui-color-on-primary));background-color:rgb(var(--mdui-color-primary));--mdui-comp-ripple-state-layer-color:var(--mdui-color-on-primary)}:host([variant=tonal]){color:rgb(var(--mdui-color-on-secondary-container));background-color:rgb(var(--mdui-color-secondary-container));--mdui-comp-ripple-state-layer-color:var(
      --mdui-color-on-secondary-container
    )}:host([variant=outlined]){border:.0625rem solid rgb(var(--mdui-color-outline));--mdui-comp-ripple-state-layer-color:var(--mdui-color-primary)}:host([variant=text]){--mdui-comp-ripple-state-layer-color:var(--mdui-color-primary)}:host([variant=outlined][focus-visible]){border-color:rgb(var(--mdui-color-primary))}:host([variant=elevated][hover]){box-shadow:var(--mdui-elevation-level2)}:host([variant=filled][hover]),:host([variant=tonal][hover]){box-shadow:var(--mdui-elevation-level1)}:host([disabled]:not([disabled=false i])),:host([loading]:not([loading=false i])){cursor:default;pointer-events:none}:host([disabled]:not([disabled=false i])){color:rgba(var(--mdui-color-on-surface),38%);box-shadow:var(--mdui-elevation-level0)}:host([variant=elevated][disabled]:not([disabled=false i])),:host([variant=filled][disabled]:not([disabled=false i])),:host([variant=tonal][disabled]:not([disabled=false i])){background-color:rgba(var(--mdui-color-on-surface),12%)}:host([variant=outlined][disabled]:not([disabled=false i])){border-color:rgba(var(--mdui-color-on-surface),12%)}.label{display:inline-flex;padding-right:.5rem;padding-left:.5rem}.end-icon,.icon{display:inline-flex;font-size:1.28571429em}.end-icon mdui-icon,.icon mdui-icon,::slotted([slot=end-icon]),::slotted([slot=icon]){font-size:inherit}mdui-circular-progress{display:inline-flex;width:1.125rem;height:1.125rem}:host([variant=filled]) mdui-circular-progress{stroke:rgb(var(--mdui-color-on-primary))}:host([variant=tonal]) mdui-circular-progress{stroke:rgb(var(--mdui-color-on-secondary-container))}:host([disabled]:not([disabled=false i])) mdui-circular-progress{stroke:rgba(var(--mdui-color-on-surface),38%)}`;

// node_modules/mdui/components/button/index.js
var Button = class Button2 extends ButtonBase {
  constructor() {
    super(...arguments);
    this.variant = "filled";
    this.fullWidth = false;
    this.rippleRef = createRef();
  }
  get rippleElement() {
    return this.rippleRef.value;
  }
  render() {
    return html`<mdui-ripple ${ref(this.rippleRef)} .noRipple="${this.noRipple}"></mdui-ripple>${this.isButton() ? this.renderButton({
      className: "button",
      part: "button",
      content: this.renderInner()
    }) : this.disabled || this.loading ? html`<span part="button" class="button _a">${this.renderInner()}</span>` : this.renderAnchor({
      className: "button",
      part: "button",
      content: this.renderInner()
    })}`;
  }
  renderIcon() {
    if (this.loading) {
      return this.renderLoading();
    }
    return html`<slot name="icon" part="icon" class="icon">${this.icon ? html`<mdui-icon name="${this.icon}"></mdui-icon>` : nothingTemplate}</slot>`;
  }
  renderLabel() {
    return html`<slot part="label" class="label"></slot>`;
  }
  renderEndIcon() {
    return html`<slot name="end-icon" part="end-icon" class="end-icon">${this.endIcon ? html`<mdui-icon name="${this.endIcon}"></mdui-icon>` : nothingTemplate}</slot>`;
  }
  renderInner() {
    return [this.renderIcon(), this.renderLabel(), this.renderEndIcon()];
  }
};
Button.styles = [ButtonBase.styles, style2];
__decorate([
  property({ reflect: true })
], Button.prototype, "variant", void 0);
__decorate([
  property({
    type: Boolean,
    reflect: true,
    converter: booleanConverter,
    attribute: "full-width"
  })
], Button.prototype, "fullWidth", void 0);
__decorate([
  property({ reflect: true })
], Button.prototype, "icon", void 0);
__decorate([
  property({ reflect: true, attribute: "end-icon" })
], Button.prototype, "endIcon", void 0);
Button = __decorate([
  customElement("mdui-button")
], Button);

export {
  getFormControls,
  formResets,
  FormController,
  CircularProgress,
  ButtonBase,
  Button
};
//# sourceMappingURL=chunk-FITIL2ER.js.map
